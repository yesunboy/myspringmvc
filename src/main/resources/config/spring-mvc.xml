<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="
    http://www.springframework.org/schema/context   
    http://www.springframework.org/schema/context/spring-context-4.3.xsd    
    http://www.springframework.org/schema/beans    
    http://www.springframework.org/schema/beans/spring-beans-4.3.xsd    
    http://www.springframework.org/schema/tx    
    http://www.springframework.org/schema/tx/spring-tx-4.3.xsd    
    http://www.springframework.org/schema/jdbc    
    http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd    
    http://www.springframework.org/schema/aop    
    http://www.springframework.org/schema/aop/spring-aop-4.3.xsd  
    http://www.springframework.org/schema/mvc    
    http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd ">

	<!-- 配置扫描controller包 -->
	<context:component-scan base-package="com.ybh" />
	<context:annotation-config />
	<!-- 启动Spring MVC的注解功能，完成请求和注解POJO(java简单对象)的映射 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />

	<!-- 视图名称的解析 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix">
			<value>/WEB-INF/view/</value>
		</property>

		<property name="suffix">
			<value>.jsp</value>
		</property>

	</bean>
	<!-- 配置环境变量 -->
	<bean id="placeholderConfig"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:config/jdbc.properties</value>
			</list>
		</property>
	</bean>
	<!-- data source -->
	<bean id="oracle" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass">
			<value>${oracle.driverClassName}</value>
		</property>
		<property name="jdbcUrl">
			<value>${oracle.url}</value>
		</property>
		<property name="user">
			<value>${oracle.username}</value>
		</property>
		<property name="password">
			<value>${oracle.password}</value>
		</property>
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement">
			<value>${oracle.c3p0.acquireIncrement}</value>
		</property>
		<!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize">
			<value>${oracle.c3p0.initialPoolSize}</value>
		</property>
		<property name="minPoolSize">
			<value>${oracle.c3p0.minPoolSize}</value>
		</property>
		<property name="maxPoolSize">
			<value>${oracle.c3p0.maxPoolSize}</value>
		</property>
		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime">
			<value>${oracle.c3p0.maxIdleTime}</value>
		</property>
		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod">
			<value>${oracle.c3p0.idleConnectionTestPeriod}</value>
		</property>
		<!-- JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。 
			如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 -->
		<property name="maxStatements">
			<value>${oracle.c3p0.maxStatements}</value>
		</property>
		<!-- c3p0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能 通过 多线程实现多个操作同时被执行。Default: 
			3 -->
		<property name="numHelperThreads">
			<value>${oracle.c3p0.numHelperThreads}</value>
		</property>
	</bean>

	<!--创建SqlSessionFactory，同时指定数据源 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="oracle" />
		<!--configLocation属性指定mybatis的核心配置文件 -->
		<property name="configLocation" value="classpath:config/mybatisConfig.xml"></property>
		<!-- 所有配置的mapper文件 <property name="mapperLocations" value="classpath*:com/yiibai/mapepr/*.xml" 
			/> -->
	</bean>


	<!--配置事务驱动 -->
	<bean name="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="oracle"></property>
	</bean>
	<tx:annotation-driven transaction-manager="txManager" />
</beans>